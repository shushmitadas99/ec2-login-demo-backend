package com.revature.dao;

import com.revature.model.User;
import com.revature.utility.ConnectionUtility;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserDao {
    //CRUD ops

    //CREATE
    //Take in User object and return user object with autogenerated id
    public User createUser(User user) throws SQLException{
        //Try-with-resources:
        //Whatever object is being used within the () will be automatically closed
        //whenever the try-with-resources block is done executing OR exception occurs -> automatic close
        try(Connection con = ConnectionUtility.createConnection()) {
            PreparedStatement pstmt = con.prepareStatement("INSERT INTO users (username, password, email) " +
                    "VALUES (?, ?, ?)", Statement.RETURN_GENERATED_KEYS);  //RETURN_GENERATED_KEYS for User Id
            //set the above ? in statement into values:
            //setting an information to create a new user from a User object that contains username, password and email-
            //-that we essentially wanna register
            //we are setting properties using setString()
            pstmt.setString(1, user.getUsername());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getEmail());

            //executeUpdate is used to execute DML statements
            //Particularly, INSERT, UPDATE, and DELETE
            int numberOfRecordsInserted = pstmt.executeUpdate();

            //Retrieve autogenerated ID PK
            ResultSet rs = pstmt.getGeneratedKeys();
            rs.next(); //moves the "cursor" to the next row in the ResultSet
            int autogeneratedID = rs.getInt(1);
            //project reference: for autogenerated dates we would be using the column index for dates column

            return new User(autogeneratedID, user.getUsername(), user.getPassword(), user.getEmail());
        }
    }

    //READ
    public List<User> getAllUsers() throws SQLException{
        List<User> users = new ArrayList<>();
        try(Connection con = ConnectionUtility.createConnection()) {
            Statement stmt = con.createStatement();

            ResultSet rs = stmt.executeQuery("SELECT * FROM users");

            //iterating over ResultSet
            //rs.next() does 2 things:
            // 1: moves the cursor to the next record
            // 2: returns a boolean that's true if there's a next record
            while(rs.next()){
                int id = rs.getInt("id");
                String username = rs.getString("username");
                String password = rs.getString("password");
                String email = rs.getString("email");

                User user  = new User(id, username, password, email);
                users.add(user);  //Add user object to users list
            }

            return users;
        }
    }

    //READ user by username and password
    public User getUserByUsernameAndPassword(String username, String password) throws SQLException {
        try(Connection con = ConnectionUtility.createConnection()){
            PreparedStatement pstmt = con.prepareStatement("SELECT * FROM users WHERE username = ? AND password = ?");

            pstmt.setString(1, username);
            pstmt.setString(2, password);

            ResultSet rs = pstmt.executeQuery();

            if(rs.next()){
                //move cursor to first result (there should only be one anyways)
                //Could also do it like above READ with variables
                return new User(rs.getInt("id"), rs.getString("username"),
                        rs.getString("password"), rs.getString("email"));
            }else{
                return null;
            }
        }
    }

    //UPDATE user using the id provided in the user object parameter
    //Username, password, email
    public User updateUser(User user) throws SQLException{
        try(Connection con = ConnectionUtility.createConnection()){
            PreparedStatement pstmt = con.prepareStatement("UPDATE users SET username=?, password=?, email=? WHERE id=?");

            pstmt.setString(1, user.getUsername());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getEmail());

            pstmt.setInt(4, user.getId());

            int numberOfUpdatedRecords = pstmt.executeUpdate();

            return new User(user.getId(), user.getUsername(), user.getPassword(), user.getEmail());
        }
    }

    //DELETE
    public boolean deleteUserById(int id) throws SQLException{
        try(Connection con = ConnectionUtility.createConnection()){
            PreparedStatement pstmt = con.prepareStatement("DELETE FROM users WHERE id=?");

            //all the ? data comes here
            pstmt.setInt(1, id); //id comes from method parameter

            int numberOfDeletedRecords = pstmt.executeUpdate();

            return numberOfDeletedRecords == 1; //true if record was deleted, false if not
        }
    }
}
